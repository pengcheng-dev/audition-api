plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id "maven-publish"
    id 'jacoco'
    id "com.github.spotbugs" version "5.0.14"
    id "io.freefair.lombok" version "8.0.1"
    //Enable checkstyle and PMD. Fix all the relevant issues.
    id "checkstyle"
    id "pmd"
}

group = 'com.audition'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'


//allow for code-analysis.gradle to be applied for code analysis.
apply from: 'config/code-analysis.gradle'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

ext {
    set('springCloudVersion', "2022.0.1")
    set('logbackVersion', "1.4.5")
    set('slf4jVersion', "2.0.5")
    set('springdocVersion', "2.0.2")
    set('openTelemetryVersion', "1.24.0-alpha")
}

dependencies {

    //Clean up unused dependencies. Add comments on consideration on any improvements you made.
    //use micrometer for metrics, otel for tracing
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    //implementation "io.micrometer:micrometer-tracing-bridge-brave"
    //implementation "io.micrometer:micrometer-tracing"
    //implementation "io.micrometer:context-propagation"
    implementation "io.micrometer:micrometer-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    //runtimeOnly "io.micrometer:micrometer-registry-prometheus"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    // OpenTelemetry dependencies
    implementation "io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter:${openTelemetryVersion}"
    implementation "io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0:2.6.0-alpha"
    //implementation "io.opentelemetry:opentelemetry-exporter-otlp:${openTelemetryVersion}"
    //implementation "io.opentelemetry:opentelemetry-sdk:${openTelemetryVersion}"
    //implementation "io.opentelemetry:opentelemetry-api:${openTelemetryVersion}"
    //implementation "io.opentelemetry:opentelemetry-sdk:${openTelemetryVersion}"
    //implementation "io.opentelemetry:opentelemetry-context:${openTelemetryVersion}"
    // Add exporter
    //implementation "io.opentelemetry:opentelemetry-exporter-jaeger:${openTelemetryVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.mockito:mockito-inline:3.10.0"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


task prepareGitHooks(type: Copy) {
    from "$projectDir/git-hooks"
    into "$projectDir/.git/hooks"
    include "*"
}
tasks.matching { it.name != 'prepareGitHooks' }.all { Task task -> task.dependsOn prepareGitHooks }


tasks.named('test') {
    useJUnitPlatform()
}
